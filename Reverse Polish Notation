SOURCECODE: 
#ifndef DYNINTSTACK_H
#define DYNINTSTACK_H
#define nullptr 0
class DynIntStack
{
private:
   struct StackNode
   {
      int value;        
      StackNode *next; 
   };
   StackNode *top;  
public:
   DynIntStack()
      {  top = nullptr; }
   ~DynIntStack();
   void push(int);
   void pop(int &);
   bool isEmpty();
};
#endif
#include <iostream>
#include "DynIntStack.h"
#include <cstdlib>
#define nullptr 0
using namespace std;
DynIntStack::~DynIntStack()
{
   StackNode *nodePtr = nullptr, *nextNode = nullptr;
   nodePtr = top;
   while (nodePtr != nullptr)
   {
      nextNode = nodePtr->next;
      delete nodePtr;
      nodePtr = nextNode;
   }
}
void DynIntStack::push(int num)
{
   StackNode *newNode = nullptr; 
   newNode = new StackNode;
   newNode->value = num;
   if (isEmpty())
   {
      top = newNode;
      newNode->next = nullptr;
   }
   else 
   {
      newNode->next = top;
      top = newNode;
   }
}

//****************************************************
// Member function pop pops the value at the top     *
// of the stack off, and copies it into the variable *
// passed as an argument.                            *
//****************************************************

void DynIntStack::pop(int &num)
{
   StackNode *temp = nullptr; // Temporary pointer

   // First make sure the stack isn't empty.
   if (isEmpty())
   {
      cout << "The stack is empty.\n";
   }
   else  // pop value off top of stack
   {
      num = top->value;
      temp = top->next;
      delete top;
      top = temp;
   }
}

//****************************************************
// Member function isEmpty returns true if the stack *
// is empty, or false otherwise.                     *
//****************************************************

bool DynIntStack::isEmpty()
{
   bool status;

   if (!top)
      status = true;
   else
      status = false;

   return status;
}

#include <iostream>
#include "DynIntStack.h"
#include <string>

using namespace std;

int main()
{

string exp;
int i=0;
	cout<<"            This program is a Reverse Polish Calculator."<<endl;
	cout<<"            Please included parenthesis for precedence."<<endl;
     cout<<"            ENTER THE EXPRESSION." <<endl;
    cin>>exp;
     char op;

     DynIntStack operand;
	DynIntStack NUM;
	//cout << exp.length() << endl;
	//system ("PAUSE");
	while ((i)< exp.length())
    {
      if (exp.at(i)=='(')
      {
          //cout << "found \( \n";
          i++;
          //cout << "i = " << i << endl;
          //system ("PAUSE");
          continue;

      }
      if ( isdigit(exp.at(i)))
     {
     int num = exp.at(i) - '0' ;
      i++;
      NUM.push(num);
      //cout << "found number; num = "<< num<< endl;
      //cout << "i = " << i << endl;
      //system ("PAUSE");
     }
     if( exp.at(i) == ')')
     {
         //cout << "Found \)";
         //system("PAUSE");

        int value2;
        NUM.pop(value2);
        int value1;
        int sum=0;
        NUM.pop(value1);
        i++;
        int op;
        operand.pop(op);
        if (op==1)
        {
            sum = value1+value2;
        }
        if (op==2)
        {
            sum=value1-value2;
        }
        if (op==3)
        {
            sum= value1/value2;
        }
        if (op==4)
        {
            sum= value1*value2;
        }
        NUM.push(sum);
     }
     else
     {
         int OP=0;
        char oper = exp.at(i);
          if (oper=='+')
        {
         OP=1;
        }
        if (oper=='-')
        {
         OP=2;
        }
        if (oper=='/')
        {
            OP=3;
        }
        if (oper=='*')
        {
            OP=4;
        }
        i++;
        operand.push(OP);
        //cout << "found operator; oper = "<< oper<< " " << OP <<endl;
      //cout << "i = " << i << endl;
      //system ("PAUSE");
     }
    }
	int answer;
	NUM.pop(answer);
	cout<<"The answer is: " << answer<<endl;
	return 0;
}
